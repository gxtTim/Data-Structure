class Solution {
    //Time: O(log(n)), Space: O(1)
    public int[] searchRange(int[] nums, int target) {
        int[] res = {-1, -1};
        if (nums == null || nums.length == 0) return res;
        int left = 0, right= nums.length - 1;
        //find the first occurrence
        while (left < right - 1) {
            int mid = left + (right - left)/2;
            if (nums[mid] >= target) right = mid;
            else left = mid;
        }
        if (nums[left] == target)  {
            res[0] = left;
        }
        if (nums[right] == target && nums[left] != target) {
            res[0] = right;
        }
        //find the last occurrence
        int low = 0, high = nums.length - 1;
        while (low < high - 1) {
            int mid = low + (high - low)/2;
            if (nums[mid] <= target) low = mid;
            else high = mid;
        }
        if (nums[high] == target) {
            res[1] = high;
        }
        if (nums[low] == target && nums[high] != target) {
            res[1] = low;
        }
        return res;
    }
}
