Sol 1:
class Solution {
    // Time: O(log(n)), Space: O(1)
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        // Find the pivot position
        int pivot = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < nums[i - 1]) {
                pivot = i;
                break;
            }
        }
        // Find the region before the pivot
        int res = search(nums, target, 0, pivot - 1);        
        if (res != -1) {
            return res;
        } else {
            // Find the region after the pivot
            return search(nums, target, pivot, nums.length - 1);
        }
    }   
    
    private int search (int[] nums, int target, int left, int right) {
        if (nums == null || nums.length == 0) return -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
}

Sol 2:
class Solution {
    // Time: O(log(n)), Space: O(1)
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        int start = 0, end = nums.length - 1;
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] > nums[end]) {
                if (target > nums[mid] || target <= nums[end]) {
                    start = mid + 1;
                } else {
                    end = mid;
                }
            } else {
                if (target > nums[mid] && target <= nums[end]) {
                    start = mid + 1;
                } else {
                    end = mid;
                }
            }
        }
        if (start == end && target != nums[start]) {
            return -1;
        }
        return start;
    }
}
