class Solution {
    // Time: O(n) = O(13), Space: O(n)
    public String intToRoman(int num) {
        int[] integers = new int[]{1000, 900, 500, 400, 
                                   100, 90, 50, 40, 
                                   10, 9, 5, 4, 1};
        String[] romans = new String[]{"M", "CM", "D", "CD",
                                       "C", "XC", "L", "XL",
                                       "X", "IX", "V", "IV", "I"};
        
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < integers.length; i++) {
            while (num - integers[i] >= 0) {
                num -= integers[i];
                sb.append(romans[i]);
            }
        }
        return sb.toString();
    }
    
    // Time, Space: O(1)
    // According to the question, ranges from 1 to 3999
    public String intToRoman(int num) {
        // {"", 1000, 2000, 3000}
        String[] Ms = {"", "M", "MM", "MMM"};
        // {"", 100, 200, 300, 400, 500, 600, 700, 800, 900}
        String[] Cs = {"", "C", "CC", "CCC", "CD", 
                      "D", "DC", "DCC", "DCCC", "CM"};
        // {"", 10, 20, 30, 40, 50, 60, 70, 80, 90}
        String[] Xs = {"", "X", "XX", "XXX", 
                      "XL", "L", "LX", "LXX", "LXXX", "XC"};
        // {"", 1, 2, 3, 4, 5, 6, 7, 8, 9}
        String[] Is = {"", "I", "II", "III",
                       "IV", "V", "VI", "VII", "VIII", "IX"};
        return Ms[num / 1000] + Cs[(num % 1000) / 100] +
               Xs[(num % 100) / 10] + Is[num % 10];
    }
}
