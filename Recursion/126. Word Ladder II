class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        Set<String> dict = new HashSet<>(wordList);
        List<List<String>> res = new ArrayList<>();
        Map<String, List<String>> neis = new HashMap<>();
        Map<String, Integer> dist = new HashMap<>();
        List<String> sol = new ArrayList<>();
        
        dict.add(beginWord);
        bfs(beginWord, endWord, dict, neis, dist);
        dfs(beginWord, endWord, dict, neis, dist, sol, res);
        return res;
    }
    private void bfs(String start, String end, Set<String> dict,
                     Map<String, List<String>> neis, 
                     Map<String, Integer> dist) {
        for (String str : dict) {
            neis.put(str, new ArrayList<>());
        }
        Queue<String> q = new LinkedList<>();
        q.offer(start);
        dist.put(start, 0);
        
        while (!q.isEmpty()) {
            int size = q.size();
            boolean found = false;
            for (int i = 0; i < size; i++) {
                String curr = q.poll();
                int currDist = dist.get(curr);
                List<String> nei = getNei(curr, dict);
                for (String n : nei) {
                    neis.get(curr).add(n);
                    if (!dist.containsKey(n)) {
                        dist.put(n, currDist + 1);
                        if (end.equals(n)) {
                            found = true;
                        } else {
                            q.offer(n);
                        }
                    }
                }
                if (found) {
                    break;
                }
            }
        }
    }
    private List<String> getNei(String node, Set<String> dict) {
        List<String> res = new ArrayList<>();
        char[] chars = node.toCharArray();
        for (char ch = 'a'; ch <= 'z'; ch++) {
            for (int i = 0; i < chars.length; i++) {
                if (chars[i] == ch) {
                    continue;
                }
                char old = chars[i];
                chars[i] = ch;
                if (dict.contains(String.valueOf(chars))) {
                    res.add(String.valueOf(chars));
                }
                chars[i] = old;
            }
        }
        return res;
    }
    private void dfs(String curr, String end, Set<String> dict,
                     Map<String, List<String>> neis,
                     Map<String, Integer> dist, 
                     List<String> sol, List<List<String>> res) {
        sol.add(curr);
        if (end.equals(curr)) {
            res.add(new ArrayList<>(sol));
        } else {
            for (String next : neis.get(curr)) {
                if (dist.get(next) == dist.get(curr) + 1) {
                    dfs(next, end, dict, neis, dist, sol, res);
                }
            }
        }
        sol.remove(sol.size() - 1);
    }
}
