class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(res, new ArrayList<>(), candidates, target, 0);
        return res;
    }
    private void backtrack(List<List<Integer>> res,
                           List<Integer> list, int[] nums,
                           int target, int start) {
        if (target < 0) {
            return;
        } else if (target == 0) {
            res.add(new ArrayList<>(list));
        } else {
            for (int i = start; i < nums.length; i++) {
                list.add(nums[i]);
                // Reuse the element
                backtrack(res, list, nums, target - nums[i], i); 
                list.remove(list.size() - 1);
            }
        }
    }
}
