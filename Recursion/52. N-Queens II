class Solution {
    // Time: O(n!), Space:O(n)
    public int totalNQueens(int n) {
        int[] count = new int[1];
        boolean[] cols = new boolean[n];
        boolean[] d1 = new boolean[n * 2];
        boolean[] d2 = new boolean[n * 2];
        backtracking(0, cols, d1, d2, n, count);
        return count[0];
    }
    private void backtracking(int row, boolean[] cols, 
                              boolean[] d1, boolean[] d2, int n, int[] count) {
        if (row == n) {
            count[0]++;
        }
        for (int col = 0; col < n; col++) {
            int id1 = col - row + n;
            int id2 = col + row;
            if (cols[col] || d1[id1] || d2[id2]) {
                continue;
            }
            cols[col] = true;
            d1[id1] = true;
            d2[id2] = true;
            backtracking(row + 1, cols, d1, d2, n, count);
            cols[col] = false;
            d1[id1] = false;
            d2[id2] = false;
        }
    }
}
