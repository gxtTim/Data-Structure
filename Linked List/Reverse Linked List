/*** Reverse a singly-linked list. ***/

/**
 * class ListNode {
 *   public int value;
 *   public ListNode next;
 *   public ListNode(int value) {
 *     this.value = value;
 *     next = null;
 *   }
 * }
 */
public class Solution {
  //iterative: Time: O(n), Space: O(1)
  public ListNode reverse1(ListNode head) {
    if (head == null || head.next == null) return head;
    ListNode prev = null;
    ListNode curr = head;
    while (curr != null) {
      ListNode next = curr.next;
      curr.next = prev;
      prev = curr;
      curr = next;
    }
    return prev;
  }
  
  // Recursive, Time: O(n), Space: O(n)
  public ListNode reverse2(ListNode head) {
    if (head == null || head.next == null) return head;
    ListNode newHead = reverse(head.next);
    head.next.next = head;
    head.next = null;
    return newHead;
  }
}
