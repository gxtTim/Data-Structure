class Solution {
    //Time: O(n) since no need to recurse both sides , Space: O(1)
    public int findKthLargest(int[] nums, int k) {
        if (nums == null || nums.length == 0) return 0;
        int left = 0, right = nums.length - 1;
        //Key is pos's condition
        //if asking kth smallest, condition is pos + 1 == k
        //But asking kth largest, condition is pos == nums.length - k
        while (true) {
            int pos = partition(nums, left, right);
            if (pos == nums.length - k) return nums[pos];
            else if (pos < nums.length - k) left = pos + 1;
            else right = pos - 1;
        } 
    }
    private int partition(int[] nums, int left, int right) {
        Random rand = new Random();
        int pivot = left + rand.nextInt(right - left + 1);
        swap(nums, pivot, right);
        int i = left, j = right - 1;
        while (i <= j) {
            if (nums[i] <= nums[right]) i++;
            else {
                swap(nums, i, j);
                j--;
            }
        }
        swap(nums, i, right);
        return i;
    }
    private void swap(int[] nums, int a, int b) {
        int tmp = nums[a];
        nums[a] = nums[b];
        nums[b] = tmp;
    }
}
