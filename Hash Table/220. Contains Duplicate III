class Solution {
    // Time: O(n), Space: O(n)
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (k < 1 || t < 0) {
            return false;
        }
        Map<Long, Long> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            long remappedNum = (long) nums[i] - Integer.MIN_VALUE;
            // To avoid t == 0 error
            long bucket = remappedNum / ((long) t + 1);
            // Has duplicates, difference < t
            if (map.containsKey(bucket) || 
                (map.containsKey(bucket - 1) && 
                 remappedNum - map.get(bucket - 1) <= t) ||
                (map.containsKey(bucket + 1) &&
                 map.get(bucket + 1) - remappedNum <= t)) {
                return true;
            }
            if (map.entrySet().size() >= k) {
                long lastBucket = ((long) nums[i - k] - Integer.MIN_VALUE) / 
                                   ((long) t + 1);
                map.remove(lastBucket);
            }
            // Replace the duplicate key
            map.put(bucket, remappedNum);
        }
        return false;
    }
}
