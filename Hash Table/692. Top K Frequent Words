class Solution {
    //Time: O(n * log(k))?,Space: O(n)
    public List<String> topKFrequent(String[] words, int k) {
        List<String> res = new ArrayList<>();
        if (words == null) return res;
        Map<String, Integer> map = new HashMap<>();
        for (String word: words) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        Queue<Map.Entry<String, Integer>> freq = new PriorityQueue<>(
            (a,b)-> a.getValue() == b.getValue() ? a.getKey().compareTo(b.getKey()) : 
            (b.getValue() - a.getValue()));
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            freq.add(entry);
        }
        while (res.size() < k) {
            Map.Entry<String, Integer> entry = freq.poll();
            res.add(entry.getKey());
        }
        return res;
    }
}
