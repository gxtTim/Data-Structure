class Solution {
    //Time: O(m * n), Space: O(m + n)
    public int[] intersect(int[] nums1, int[] nums2) {
        if (nums1 == null || nums1.length == 0) return nums1;
        if (nums2 == null || nums2.length == 0) return nums2;
        Map<Integer, Integer> map1 = new HashMap<>();
        Map<Integer, Integer> map2 = new HashMap<>();
        for (int num : nums1) {
            map1.put(num, map1.getOrDefault(num, 0) + 1);
        }
        for (int num : nums2) {
            map2.put(num, map2.getOrDefault(num, 0) + 1);
        }
        List<Integer> list = new ArrayList<>();
        //O(m  * n)
        for (Map.Entry<Integer, Integer> entry : map1.entrySet()) {
            if (map2.containsKey(entry.getKey())) {
                for (int i = 0; i < Math.min(entry.getValue(),                                                               map2.get(entry.getKey()));i++) {
                    list.add(entry.getKey());
                }
            }
        }
        int[] res = new int[list.size()];
        int i = 0;
        for (int num : list) {
            res[i] = num;
            i++;
        }
        return res;      
    }
}
