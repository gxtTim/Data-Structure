class Solution {
    //Time:O((n + k) * log(n))?, Space: O(n)
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> res = new ArrayList<>();
        if (nums == null) return res;
        //Space: O(n)
        Map<Integer, Integer> map = new HashMap<>();
        
        //Time: O(n * 1)
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        //Space:O(n)
        Queue<Map.Entry<Integer, Integer>> heap = new PriorityQueue<>((a,b)->                                                             (b.getValue() - a.getValue()));
        //Time: O(n * log(n))
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            heap.add(entry);
        }
        //Time: O(k * log(n))
        while (res.size() < k) {
            Map.Entry<Integer, Integer> entry = heap.poll();
            res.add(entry.getKey());
        }
        return res;
    }
}
