/***
* Java: Implement a queue by using two stacks. The queue should provide size(), isEmpty(), offer(), poll() and peek() operations. When the queue is empty, poll() and peek() should return null.

* C++: Implement a queue by using two stacks. The queue should provide size(), isEmpty(), push(), front() and pop() operations. When the queue is empty, front() should return -1.

* Assumptions
* The elements in the queue are all Integers.
* size() should return the number of elements buffered in the queue.
* isEmpty() should return true if there is no element buffered in the queue, false otherwise.
***/

public class Solution {
  //Time: worst O(n), amortized O(1), Space: O(1)
  private Deque <Integer> in = new LinkedList<>();
  private Deque <Integer> out = new LinkedList<>();
  
  public Solution() {

  }
  
  public Integer poll() {
    if (out.isEmpty()){
      while (!in.isEmpty()){
        out.push(in.pop());
      }
    }
    if (out.isEmpty()) return null;
    return out.pop();
  }
  
  public void offer(int element) {
    in.push(element);
  }
  
  public Integer peek() {
    if (out.isEmpty()){
      while (!in.isEmpty()){
        out.push(in.pop());
      }
    }
    if (out.isEmpty()) return null;
    return out.peek();
  }
  
  public int size() {
    return in.size() + out.size();
  }
  
  public boolean isEmpty() {
    return in.isEmpty() && out.isEmpty();
  }
}
