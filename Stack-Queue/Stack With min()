/*** Enhance the stack implementation to support min() operation. min() should return the current minimum value in the stack. 
* If the stack is empty, min() should return -1.
* pop() - remove and return the top element, if the stack is empty, return -1
* push(int element) - push the element to top
* top() - return the top element without remove it, if the stack is empty, return -1
* min() - return the current min value in the stack.
***/

public class Solution {
  //Time: O(1), Space: worst O(n), average better than O(n)
  private Deque <Integer> stack = new LinkedList<>();
  private Deque <Integer> min = new LinkedList<>();
  
  public Solution() {
  }
  
  public int pop() {
    if (stack.isEmpty()) return -1;
    int result = stack.pop();
    if (result == min.peek()) {
      min.pop();
    }
    return result;
  }
  
  public void push(int element) {
    stack.push(element);
    if (min.isEmpty() || element <= min.peek()) {
      min.push(element);
    }
  }
  
  public int top() {
    if (stack.isEmpty()) return -1;
    return stack.peek();
  }
  
  public int min() {
    if (min.isEmpty()) return -1;
    return min.peek();
  }
}
