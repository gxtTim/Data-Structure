class Solution {
    // Time: O(n), Space: O(n)
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<>();
        if (matrix.length == 0) {
            return res;
        } 
        int rowBeg = 0, rowEnd = matrix.length - 1;
        int colBeg = 0, colEnd = matrix[0].length - 1;
        while (rowBeg <= rowEnd && colBeg <= colEnd) {
            // Traverse Right
            for (int i = colBeg; i <= colEnd; i++) {
                res.add(matrix[rowBeg][i]);
            }
            rowBeg++;
            // Traverse Down
            for (int i = rowBeg; i <= rowEnd; i++) {
                res.add(matrix[i][colEnd]);
            }
            colEnd--;
            if (rowBeg <= rowEnd) {
                // Traverse Left
                for (int i = colEnd; i >= colBeg; i--) {
                    res.add(matrix[rowEnd][i]);
                }
            }
            rowEnd--;
            if (colBeg <= colEnd) {
                // Traverse Up
                for (int i = rowEnd; i >= rowBeg; i--) {
                    res.add(matrix[i][colBeg]);
                }
            }
            colBeg++;
        }
        return res;
    }
}
