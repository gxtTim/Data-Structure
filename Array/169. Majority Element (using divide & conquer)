class Solution {
    // Time: O(nlog(n)), Space: O(log(n))
    public int majorityElement(int[] nums) {
        return majorityElement(nums, 0, nums.length - 1);
    }
    private int countInRange(int[] nums, int num, int low, int high) {
        int count = 0;
        for (int i = low; i <= high; i++) {
            if (nums[i] == num) {
                count++;
            }
        }
        return count;
    }
    private int majorityElement(int[] nums, int low, int high) {
        // Base case: the only element in an array of size 1 is the majority element
        if (low == high) {
            return nums[low];
        }
        // Recurse on left and right halves
        int mid = low + (high - low) / 2;
        int left = majorityElement(nums, low, mid);
        int right = majorityElement(nums, mid + 1, high);
        // If the two halves on the majority element, return it
        if (left == right) {
            return left;
        }
        // Otherwise, count each element and return the "winner"
        int leftCount = countInRange(nums, left, low, high);
        int rightCount = countInRange(nums, right, low, high);       
        if (leftCount > rightCount) {
            return left;
        } else {
            return right;
        }
    }
}
