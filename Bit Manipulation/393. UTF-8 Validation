class Solution {
    // Time: O(n^2), Space: O(1)
    public boolean validUtf8(int[] data) {
        if (data == null || data.length == 0) {
            return false;
        }
        boolean isValid = true;
        for (int i = 0; i < data.length; i++) {
            // 1 after 8th digit: 100000000
            if (data[i] > 255) {
                return false;
            }
            int numOfBytes = 0;
            //0xxxxxxx, 1 byte, 128(10000000)
            if ((data[i] & 128) == 0) {
                numOfBytes = 1;
            }
            //110xxxxx, 2 bytes, 224(11100000), 192(11000000)
            else if ((data[i] & 224) == 192) {
                numOfBytes = 2;
            }
            //1110xxxx, 3 bytes, 240(11110000), 224(11100000)
            else if ((data[i] & 240) == 224) {
                numOfBytes = 3;
            }
            //11110xxx, 4 bytes, 248(11111000), 240(11110000)
            else if ((data[i] & 248) == 240) {
                numOfBytes = 4;
            } else {
                return false;
            }
            // Check if next n bytes start with 10xxxxxx
            for (int j = 1; j < numOfBytes; j++) {
                if (i + j >= data.length) {
                    return false;
                }
                // 192(11000000), 128(10000000)
                if ((data[i + j] & 192) != 128) {
                    return false;
                }
            }
            i = i + numOfBytes - 1;
        }
        return isValid;
    }
    
    // Time: O(n), Space: O(1)
    public boolean validUtf8(int[] data) {
        int count = 0;
        for (int d : data) {
            if (count == 0) {
                if ((d >> 5) == 0b110) {
                    count = 1;
                } else if ((d >> 4) == 0b1110) {
                    count = 2;
                } else if ((d >> 3) == 0b11110) {
                    count = 3;
                } else if ((d >> 7) == 1) {
                    return false;
                }
            } else {
                if ((d >> 6) != 0b10) {
                    return false;
                } else {
                    count--;
                }
            }
        }
        return count == 0;
    }
}
