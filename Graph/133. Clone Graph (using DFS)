/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;

    public Node() {}

    public Node(int _val,List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
class Solution {
    /*** DFS: 
        void dfs(Node root) {
		if (root == null) return;
		root.visited = true;
		for (Node n : root.children) {
			if (n.visited == false) {
				dfs(n);
			}
		}
	}
    ***/
    // Time: O(|V| + |E|), Space: O(|V| + |E|)
    Map<Node, Node> clone = new HashMap<>();
    public Node cloneGraph(Node node) {
        if (node == null) {
            return node;
        }
        clone.put(node, new Node(node.val, new ArrayList<Node>()));
        for (Node nei : node.neighbors) {
            if (!clone.containsKey(nei)) {
                cloneGraph(nei);
            }
            // connect node with its neighbors
            clone.get(node).neighbors.add(clone.get(nei));
        }
        return clone.get(node);        
    }
}
