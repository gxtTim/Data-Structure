/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
// Time: O(n) for number of nodes in a linked list
// Space: O(n) Recursion stack keeps track of processed nodes
class Solution {
    
    // Hashmap holds old nodes as key, new nodes as value
    Map<Node, Node> visited = new HashMap<>();
    
    public Node copyRandomList(Node head) {
        if (head == null) return head;
        // If we have already processed the current node, we simply return the cloned version of it
        if (visited.containsKey(head)) {
            return visited.get(head);
        }
        // Create a new node with the value same as old node (copy the node)
        Node node = new Node(head.val, null, null);
        
        //Save this copyed (processed) node to map.
        visited.put(head, node);
        
        //Recursively copy the remaining linkede list from next and random pointer
        node.next = copyRandomList(head.next);
        node.random = copyRandomList(head.random);
        
        return node;        
    }
}
