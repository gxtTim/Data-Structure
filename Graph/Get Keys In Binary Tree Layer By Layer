/*** Get the list of list of keys in a given binary tree layer by layer. 
* Each layer is represented by a list of keys and the keys are traversed from left to right. ***/

/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  //Time: O(n), Space: O(n)
  public List<List<Integer>> layerByLayer(TreeNode root) {
    List<List<Integer>> res = new ArrayList<>();
    if (root == null) return res;
    Queue<TreeNode> q = new LinkedList<>();
    q.offer(root);
    while (!q.isEmpty()) {
      int size = q.size();
      List<Integer> in = new ArrayList<>();
      for (int i = 0; i < size; i++) {
        TreeNode curr = q.poll();
        in.add(curr.key);
        if (curr.left != null) q.offer(curr.left);
        if (curr.right != null) q.offer(curr.right);
      }
      res.add(in);
    }
    return res;
  }
}
