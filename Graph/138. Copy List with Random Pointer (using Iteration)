/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
// Time: O(n) for number of node in the linked list
// Space: O(n) for the dictionary
class Solution {
    // Map contains old node for key and copyed node for value
    Map<Node, Node> visited = new HashMap<>();
    
    public Node copyRandomList(Node head) {
        if (head == null) return head;
               
        Node old = head;
        
        // Create a new node
        Node copy = new Node (old.val, null, null);
        visited.put(old, copy);
        
        // Interate the list till all nodes are copyed
        while (old != null) {
            // Get the copy of nodes by next and random pointers
            copy.next = copyNode(old.next);
            copy.random = copyNode(old.random);
            
            old = old.next;
            copy = copy.next;
        }
        return visited.get(head);
    }
    
    private Node copyNode(Node node) {
        if (node == null) return node;
        // If the node is processed
        if (visited.containsKey(node)) {
            return visited.get(node);
        } else {
            // Otherwise, create a new node and add it to the dict
            visited.put(node, new Node(node.val, null, null));
            return visited.get(node);
        }
    }
}
