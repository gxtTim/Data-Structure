class Solution {
    // Time: O(e + q * e), Space: O(e), e = equations
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        double[] res = new double[queries.size()];
        Arrays.fill(res, -1.0);
        
        Map<String, Map<String, Double>> graph = new HashMap<>();
        buildGraph(graph, equations, values);
        
        int index = 0;
        for (List<String> query : queries) {
            String a = query.get(0);
            String b = query.get(1);
            if (!graph.containsKey(a) || !graph.containsKey(b)) {
                index++;
                continue;
            } else {
                dfs(graph, a, b, res, index, new HashSet<>(), 1.0);
                index++;
            }
        }
        return res;
    }
    private void buildGraph(Map<String, Map<String, Double>> graph,
                            List<List<String>> equations, double[] values) {
        int index = 0;
        for (List<String> equation : equations) {
            String a = equation.get(0);
            String b = equation.get(1);
            graph.putIfAbsent(a, new HashMap<>());
            graph.putIfAbsent(b, new HashMap<>());
            graph.get(a).put(a, 1.0);
            graph.get(a).put(b, values[index]);
            graph.get(b).put(b, 1.0);
            graph.get(b).put(a, 1.0 / values[index]);
            index++;
        }
    }
    private void dfs(Map<String, Map<String, Double>> graph, 
                            String a, String b, double[] res, int index,
                            Set<String> visited, double record){
        visited.add(a);
        if (graph.get(a).containsKey(b)) {
            res[index] = graph.get(a).get(b) * record;
            return;
        }
        for (String next : graph.get(a).keySet()) {
            if (visited.contains(next)) {
                continue;
            }
            dfs(graph, next, b, res, index, visited, 
                graph.get(a).get(next) * record);
        }
    }
}
