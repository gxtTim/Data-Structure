class Solution {
    //Time: O(V + E); Space: O(V)
    public boolean isBipartite(int[][] graph) {
        //Initialize an uncolored array, 0 means red, 1 means blue
        int[] colors = new int[graph.length];
        Arrays.fill(colors, -1);
        
        for (int i = 0; i < graph.length; i++) {
            if (colors[i] == -1 && !validColor(graph, colors, 0, i)) {
                return false;
            }
        }
        return true;
    }
    
    public boolean validColor(int[][] graph, int[] colors, int color, int node) {
        //If the node has been colored
        if (colors[node] != -1) {
            return colors[node] == color;
        }
        colors[node] = color;
        //Traverse the whole graph via DFS
        for (int next : graph[node]) {
            if (!validColor(graph, colors, 1 - color, next)) {
                return false;
            }
        }
        return true;
    }
}
