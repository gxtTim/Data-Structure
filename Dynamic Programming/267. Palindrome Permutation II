class Solution {
    // Time: O(n!), Space: (n)
    public List<String> generatePalindromes(String s) {
        List<String> res = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        // Count all chars
        int[] c = new int[256];
        for (int i = 0; i < s.length(); i++) {
            c[s.charAt(i)] += 1;
        }
        // Count all odd chars
        for (int i = 0; i < c.length; i++) {
            if (c[i] % 2 != 0) {
                sb.append((char) i);
            }
        }
        // If there is more than 1 odd char, return the empty list
        if (sb.length() > 1) {
            return res;
        }
        permute(res, sb, c, s.length());
        return res;
    }
    private void permute(List<String> res, StringBuilder sb,
                         int[] c, int len) {
        if (sb.length() == len) {
            res.add(sb.toString());
            return;
        }
        for (int i = 0; i < c.length; i++) {
            if (c[i] > 1) {
                c[i] -= 2;
                sb.insert(0, (char) i);
                sb.append((char) i);
                permute(res, sb, c, len);
                // Backtracking
                sb.deleteCharAt(0);
                sb.deleteCharAt(sb.length() - 1);
                c[i] += 2;
            }
        }
    }   
}
