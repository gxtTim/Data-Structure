class Solution {
    // Time: O(mn), Space: O(mn)
    public boolean wordPatternMatch(String pattern, String str) {
        Map<Character, String> map = new HashMap<>();
        Set<String> set = new HashSet<>();
        return wordPatternMatch(str, 0, pattern, 0, map, set);
    }
    private boolean wordPatternMatch(String str, int i,
                                     String pattern, int j,
                                     Map<Character, String> map,
                                     Set<String> set) {
        if (i == str.length() && j == pattern.length()) {
            return true;
        }
        if (i == str.length() || j == pattern.length()) {
            return false;
        }
        char c = pattern.charAt(j);
        if (map.containsKey(c)) {
            String s = map.get(c);
            if (!str.startsWith(s, i)) {
                return false;
            }
            return wordPatternMatch(str, i + s.length(), 
                                    pattern, j + 1, map, set);
        }
        for (int k = i; k < str.length(); k++) {
            String pat = str.substring(i, k + 1);
            if (set.contains(pat)) {
                continue;
            }
            map.put(c, pat);
            set.add(pat);
            if (wordPatternMatch(str, k + 1, pattern, j + 1, map, set)) {
                return true;
            }
            map.remove(c);
            set.remove(pat);
        }
        return false;
    }
}
