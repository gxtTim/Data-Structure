class Solution {
    // Time: O(n^2), Space: O(n)
    public String getPermutation(int n, int k) {
        int pos = 0;
        List<Integer> list = new ArrayList<>();
        int[] factorial = new int[n + 1];
        StringBuilder sb = new StringBuilder();
        // Create an array of factorials
        int sum = 1;
        factorial[0] = 1;
        for (int i = 1; i <= n; i++) {
            sum *= i;
            factorial[i] = sum;
        }
        // factorial[] = {1,1,2,6,24,...n!}
        
        // Create a list of numbers to get index
        for (int i = 1; i <= n; i++) {
            list.add(i);
        }
        // list = {1,2,3,4}
        
        k--;
        for (int i = 1; i <= n; i++) {
            int index = k/factorial[n - i];
            sb.append(String.valueOf(list.get(index)));
            list.remove(index);
            k -= index * factorial[n - i];
        }
        return String.valueOf(sb);
    }
}
