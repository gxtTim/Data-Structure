class Solution {
    //Time: O(n * logn), Space: O(k)
    public int findKthLargest(int[] nums, int k) {
        if (nums == null || nums.length == 0) return 0;
        Queue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        // O(N * logN)
        for (int num : nums) {
            maxHeap.offer(num);
        }
        // O(logN * (K - 1))
        for (int i = 0; i < k - 1; i++) {
            maxHeap.poll();
        }
        return maxHeap.poll();
    }
}
