class Solution {
    //Time:O((k - 1) * log(m * n)), Space:O(m * n)
    public int kthSmallest(int[][] matrix, int k) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return -1;
        }
        List<Integer> list = new ArrayList<>();
        int m = matrix.length, n = matrix[0].length;
        //O(m * n)
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                list.add(matrix[i][j]);
            }
        }
        Queue<Integer> minHeap = new PriorityQueue<>(list);
        //O((k - 1) * log(m * n))
        for (int i = 0; i < k - 1; i++) {
            minHeap.poll();
        }
        return minHeap.poll();
    }
}
