/*** Implement an iterative, post-order traversal of a given binary tree, 
* return the list of keys of each node in the tree as it is post-order traversed.***/

/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  //Time:O(n), Space:O(h),worst O(n), average O(log(n))
  public List<Integer> postOrder(TreeNode root) {
    List<Integer> list = new ArrayList<>();
    if (root == null) return list;
    postOrder(root, list);
    return list;
  }
  private void postOrder(TreeNode root, List<Integer> list) {
    if (root == null) return;
    postOrder(root.left, list);
    postOrder(root.right, list);
    list.add(root.key);
  }
}
