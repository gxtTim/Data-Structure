/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        
        if (root == null) return res;
        
        Stack<TreeNode> currLevel = new Stack<>();
        Stack<TreeNode> nextLevel = new Stack<>();
        Stack<TreeNode> tmp;//?
        
        currLevel.push(root);
        
        boolean normalOrder = true;
        
        while (!currLevel.isEmpty()) {
            List<Integer> currLevelResult = new ArrayList<>();
            while (!currLevel.isEmpty()) {
                TreeNode curr = currLevel.pop();
                currLevelResult.add(curr.val);
                // Normal Order: left -> right
                if (normalOrder) {
                    if (curr.left != null) {
                        nextLevel.push(curr.left);
                    }
                    if (curr.right != null) {
                        nextLevel.push(curr.right);
                    }
                } else {
                    // Reverse Order: right -> left
                    if (curr.right != null) {
                        nextLevel.push(curr.right);
                    }
                    if (curr.left != null) {
                        nextLevel.push(curr.left);
                    }
                }
            }  
            res.add(currLevelResult);
            //currLevel swaps with nextLevel
            tmp = currLevel;
            currLevel = nextLevel;
            nextLevel = tmp;
            normalOrder = !normalOrder;
        }
        return res;
    }
}
