/*** Determine if a given binary tree is binary search tree.There should no be duplicate keys in binary search tree. ***/
/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  //Time:O(n), Space:o(h), worst O(n), average O(log(n))
  public boolean isBST(TreeNode root) {
    if (root == null) return true;
    return isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
  }
  public boolean isBST(TreeNode root, int min, int max) {
    if (root == null) return true;
    if (root.key <= min || root.key >= max) return false;
    return isBST(root.left, min, root.key) && 
           isBST(root.right, root.key, max);
  }
}
