/*** Get the list of keys in a given binary search tree in a given range[min, max] in ascending order, 
* both min and max are inclusive. ***/

/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  //Time: O(n), Space: O(h), worst O(n), average O(log(n))
  public List<Integer> getRange(TreeNode root, int min, int max) {
    List<Integer> list = new ArrayList<>();
    if (root == null) return list;
    getRange(root, min, max, list);
    return list;
  }
  private void getRange(TreeNode root, int min, int max, List<Integer> list) {
    if (root == null) return;
    if (root.key > min) getRange(root.left, min, max, list);
    if (root.key >= min && root.key <= max) list.add(root.key);
    if (root.key < max) getRange(root.right, min, max, list);
  }
}
